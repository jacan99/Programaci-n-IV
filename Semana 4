Semana 4

import redis
import json
import uuid

# Conexión a Redis
try:
    client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
    client.ping()  # Verificar si Redis está corriendo
except redis.exceptions.ConnectionError:
    print("Error: No se puede conectar a Redis. Asegúrese de que el servidor Redis esté ejecutándose.")
    exit(1)

# Crear la base de datos y las colecciones (en Redis no es necesario, se crean dinámicamente)
def crear_base_de_datos():
    pass  # Redis no requiere una estructura de base de datos previa.

# Función para agregar nueva receta
def agregar_receta(nombre, ingredientes, pasos):
    receta_id = str(uuid.uuid4())  # Genera un ID único para la receta
    
    receta = {
        "nombre": nombre,
        "ingredientes": ingredientes,
        "pasos": pasos
    }
    
    try:
        # Almacenar la receta como un JSON
        client.set(f"receta:{receta_id}", json.dumps(receta))
    except Exception as e:
        print(f"Error al agregar la receta: {e}")

# Función para actualizar una receta existente
def actualizar_receta(receta_id, nuevo_nombre=None, nuevos_ingredientes=None, nuevos_pasos=None):
    receta_json = client.get(f"receta:{receta_id}")
    
    if not receta_json:
        print("Error: Receta no encontrada.")
        return
    
    try:
        receta = json.loads(receta_json)
        
        if nuevo_nombre:
            receta['nombre'] = nuevo_nombre
        
        if nuevos_ingredientes is not None:
            receta['ingredientes'] = nuevos_ingredientes
        
        if nuevos_pasos is not None:
            receta['pasos'] = nuevos_pasos
        
        # Guardar los cambios
        client.set(f"receta:{receta_id}", json.dumps(receta))
    except (TypeError, json.JSONDecodeError) as e:
        print(f"Error al actualizar la receta: {e}")

# Función para eliminar una receta
def eliminar_receta(receta_id):
    if client.delete(f"receta:{receta_id}") == 0:
        print("Error: Receta no encontrada.")
    else:
        print("Receta eliminada exitosamente.")

# Función para listar todas las recetas
def listar_recetas():
    recetas_keys = client.keys("receta:*")
    
    if not recetas_keys:
        print("No hay recetas disponibles.")
        return []

    recetas = []
    for key in recetas_keys:
        receta_json = client.get(key)
        try:
            receta = json.loads(receta_json)
            receta_id = key.split(":")[1]
            recetas.append((receta_id, receta["nombre"]))
        except (TypeError, json.JSONDecodeError) as e:
            print(f"Error al recuperar la receta {key}: {e}")
    
    return recetas

# Función para buscar una receta por ID
def buscar_receta(receta_id):
    receta_json = client.get(f"receta:{receta_id}")
    
    if not receta_json:
        return None, []

    try:
        receta = json.loads(receta_json)
        return receta, list(zip(receta['ingredientes'], receta['pasos']))
    except (TypeError, json.JSONDecodeError) as e:
        print(f"Error al recuperar la receta: {e}")
        return None, []

# Mostrar menú principal
def mostrar_menu():
    print("\nLibro de Recetas")
    print("1. Agregar nueva receta")
    print("2. Actualizar receta existente")
    print("3. Eliminar receta existente")
    print("4. Ver listado de recetas")
    print("5. Buscar ingredientes y pasos de receta")
    print("6. Salir")

# Función principal
def main():
    crear_base_de_datos()

    while True:
        mostrar_menu()
        opcion = input("Selecciona una opción: ")

        if opcion == "1":
            nombre = input("Nombre de la receta: ")
            ingredientes = input("Ingresa los ingredientes (separados por comas): ").split(',')
            pasos = input("Ingresa los pasos (separados por comas): ").split(',')
            agregar_receta(nombre, ingredientes, pasos)
            print("Receta agregada exitosamente.")
        
        elif opcion == "2":
            receta_id = input("ID de la receta a actualizar: ")
            nuevo_nombre = input("Nuevo nombre de la receta (deja en blanco para mantener el actual): ")
            nuevos_ingredientes = input("Nuevos ingredientes (separados por comas, deja en blanco para mantener actuales): ")
            nuevos_pasos = input("Nuevos pasos (separados por comas, deja en blanco para mantener actuales): ")
            
            nuevos_ingredientes = nuevos_ingredientes.split(',') if nuevos_ingredientes else None
            nuevos_pasos = nuevos_pasos.split(',') if nuevos_pasos else None
            
            actualizar_receta(receta_id, nuevo_nombre or None, nuevos_ingredientes, nuevos_pasos)
            print("Receta actualizada exitosamente.")
        
        elif opcion == "3":
            receta_id = input("ID de la receta a eliminar: ")
            eliminar_receta(receta_id)
        
        elif opcion == "4":
            recetas = listar_recetas()
            print("\nRecetas disponibles:")
            for receta in recetas:
                print(f"ID: {receta[0]}, Nombre: {receta[1]}")
        
        elif opcion == "5":
            receta_id = input("ID de la receta a buscar: ")
            receta, ingredientes_pasos = buscar_receta(receta_id)
            if receta:
                print(f"\nReceta: {receta['nombre']}")
                print("Ingredientes y pasos:")
                for ingrediente, paso in ingredientes_pasos:
                    if ingrediente:
                        print(f"Ingrediente: {ingrediente}")
                    if paso:
                        print(f"Paso: {paso}")
            else:
                print("Receta no encontrada.")
        
        elif opcion == "6":
            print("Saliendo...")
            break
        
        else:
            print("Opción no válida. Por favor, intenta nuevamente.")

if __name__ == "__main__":
    main()
