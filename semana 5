Semana #5 

-Código 

from flask import Flask, request, redirect, url_for, render_template, flash
import redis
import json
import uuid

app = Flask(__name__)
app.secret_key = 'supersecretkey'  # Necesario para las sesiones de flash

# Conexión a Redis
try:
    client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
    client.ping()  # Verificar si Redis está corriendo
except redis.exceptions.ConnectionError:
    print("Error: No se puede conectar a Redis. Asegúrese de que el servidor Redis esté ejecutándose.")
    exit(1)

# Crear la base de datos y las colecciones (en Redis no es necesario, se crean dinámicamente)
def crear_base_de_datos():
    pass  # Redis no requiere una estructura de base de datos previa.

@app.route('/')
def index():
    recetas = listar_recetas()
    return render_template('index.html', recetas=recetas)

@app.route('/agregar', methods=['GET', 'POST'])
def agregar():
    if request.method == 'POST':
        nombre = request.form['nombre']
        ingredientes = request.form['ingredientes'].split(',')
        pasos = request.form['pasos'].split(',')
        agregar_receta(nombre, ingredientes, pasos)
        flash('Receta agregada exitosamente.')
        return redirect(url_for('index'))
    return render_template('agregar.html')

@app.route('/actualizar/<receta_id>', methods=['GET', 'POST'])
def actualizar(receta_id):
    receta, ingredientes_pasos = buscar_receta(receta_id)
    if request.method == 'POST':
        nuevo_nombre = request.form.get('nombre', receta['nombre'])
        nuevos_ingredientes = request.form['ingredientes'].split(',') if request.form['ingredientes'] else receta['ingredientes']
        nuevos_pasos = request.form['pasos'].split(',') if request.form['pasos'] else receta['pasos']
        actualizar_receta(receta_id, nuevo_nombre, nuevos_ingredientes, nuevos_pasos)
        flash('Receta actualizada exitosamente.')
        return redirect(url_for('index'))
    return render_template('actualizar.html', receta=receta, receta_id=receta_id)

@app.route('/eliminar/<receta_id>')
def eliminar(receta_id):
    eliminar_receta(receta_id)
    flash('Receta eliminada exitosamente.')
    return redirect(url_for('index'))

@app.route('/buscar', methods=['GET'])
def buscar():
    criterio = request.args.get('criterio', '')
    recetas = listar_recetas()
    resultados = [receta for receta in recetas if criterio.lower() in receta[1].lower()]
    return render_template('buscar.html', recetas=resultados, criterio=criterio)

# Funciones para Redis
def agregar_receta(nombre, ingredientes, pasos):
    receta_id = str(uuid.uuid4())  # Genera un ID único para la receta
    receta = {
        "nombre": nombre,
        "ingredientes": ingredientes,
        "pasos": pasos
    }
    try:
        client.set(f"receta:{receta_id}", json.dumps(receta))
    except Exception as e:
        print(f"Error al agregar la receta: {e}")

def actualizar_receta(receta_id, nuevo_nombre=None, nuevos_ingredientes=None, nuevos_pasos=None):
    receta_json = client.get(f"receta:{receta_id}")
    if not receta_json:
        return
    try:
        receta = json.loads(receta_json)
        if nuevo_nombre:
            receta['nombre'] = nuevo_nombre
        if nuevos_ingredientes is not None:
            receta['ingredientes'] = nuevos_ingredientes
        if nuevos_pasos is not None:
            receta['pasos'] = nuevos_pasos
        client.set(f"receta:{receta_id}", json.dumps(receta))
    except (TypeError, json.JSONDecodeError) as e:
        print(f"Error al actualizar la receta: {e}")

def eliminar_receta(receta_id):
    client.delete(f"receta:{receta_id}")

def listar_recetas():
    recetas_keys = client.keys("receta:*")
    if not recetas_keys:
        return []
    recetas = []
    for key in recetas_keys:
        receta_json = client.get(key)
        try:
            receta = json.loads(receta_json)
            receta_id = key.split(":")[1]
            recetas.append((receta_id, receta["nombre"]))
        except (TypeError, json.JSONDecodeError) as e:
            print(f"Error al recuperar la receta {key}: {e}")
    return recetas

def buscar_receta(receta_id):
    receta_json = client.get(f"receta:{receta_id}")
    if not receta_json:
        return None, []
    try:
        receta = json.loads(receta_json)
        return receta, list(zip(receta['ingredientes'], receta['pasos']))
    except (TypeError, json.JSONDecodeError) as e:
        print(f"Error al recuperar la receta: {e}")
        return None, []

if __name__ == "__main__":
    crear_base_de_datos()
    app.run(debug=True)

-index.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Lista de Recetas</title>
</head>
<body>
    <h1>Recetas</h1>
    <a href="{{ url_for('agregar') }}">Agregar Nueva Receta</a>
    <form action="{{ url_for('buscar') }}" method="get">
        <input type="text" name="criterio" placeholder="Buscar por nombre o categoría">
        <input type="submit" value="Buscar">
    </form>
    <table border="1">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            {% for receta_id, nombre in recetas %}
            <tr>
                <td>{{ receta_id }}</td>
                <td>{{ nombre }}</td>
                <td>
                    <a href="{{ url_for('actualizar', receta_id=receta_id) }}">Editar</a>
                    <a href="{{ url_for('eliminar', receta_id=receta_id) }}">Eliminar</a>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>

-agregar.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Agregar Receta</title>
</head>
<body>
    <h1>Agregar Nueva Receta</h1>
    <form action="{{ url_for('agregar') }}" method="post">
        <label for="nombre">Nombre:</label>
        <input type="text" name="nombre" required>
        <br>
        <label for="ingredientes">Ingredientes (separados por comas):</label>
        <input type="text" name="ingredientes" required>
        <br>
        <label for="pasos">Pasos (separados por comas):</label>
        <input type="text" name="pasos" required>
        <br>
        <input type="submit" value="Agregar">
    </form>
    <a href="{{ url_for('index') }}">Volver a la lista de recetas</a>
</body>
</html>

-actualizar.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Actualizar Receta</title>
</head>
<body>
    <h1>Actualizar Receta</h1>
    <form action="{{ url_for('actualizar', receta_id=receta_id) }}" method="post">
        <label for="nombre">Nombre:</label>
        <input type="text" name="nombre" value="{{ receta['nombre'] }}">
        <br>
        <label for="ingredientes">Ingredientes (separados por comas):</label>
        <input type="text" name="ingredientes" value="{{ receta['ingredientes'] | join(',') }}">
        <br>
        <label for="pasos">Pasos (separados por comas):</label>
        <input type="text" name="pasos" value="{{ receta['pasos'] | join(',') }}">
        <br>
        <input type="submit" value="Actualizar">
    </form>
    <a href="{{ url_for('index') }}">Volver a la lista de recetas</a>
</body>
</html>

-buscar.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Buscar Recetas</title>
</head>
<body>
    <h1>Buscar Resultados</h1>
    <form action="{{ url_for('buscar') }}" method="get">
        <input type="text" name="criterio" value="{{ criterio }}" placeholder="Buscar por nombre o categoría">
        <input type="submit" value="Buscar">
    </form>
    <a href="{{ url_for('index') }}">Volver a la lista de recetas
