Semana 3

from pymongo import MongoClient
from bson.objectid import ObjectId

# Configuración de la base de datos
client = MongoClient("mongodb://localhost:27017/")
db = client.libro_recetas_db

# Crear la base de datos y las colecciones (opcional en MongoDB, las colecciones se crean automáticamente)
def crear_base_de_datos():
    db.recetas.create_index("nombre", unique=True)
    db.ingredientes_pasos.create_index("receta_id")

# Función para agregar nueva receta
def agregar_receta(nombre, ingredientes, pasos):
    receta = {
        "nombre": nombre
    }
    receta_id = db.recetas.insert_one(receta).inserted_id
    
    for ingrediente in ingredientes:
        ingrediente = ingrediente.strip()
        if ingrediente:  # Evitar insertar valores vacíos
            db.ingredientes_pasos.insert_one({
                "receta_id": receta_id,
                "ingrediente": ingrediente
            })

    for paso in pasos:
        paso = paso.strip()
        if paso:  # Evitar insertar valores vacíos
            db.ingredientes_pasos.insert_one({
                "receta_id": receta_id,
                "paso": paso
            })

# Función para actualizar una receta existente
def actualizar_receta(receta_id, nuevo_nombre=None, nuevos_ingredientes=None, nuevos_pasos=None):
    if nuevo_nombre:
        db.recetas.update_one({"_id": ObjectId(receta_id)}, {"$set": {"nombre": nuevo_nombre}})
    
    if nuevos_ingredientes is not None:
        db.ingredientes_pasos.delete_many({"receta_id": ObjectId(receta_id), "ingrediente": {"$exists": True}})
        for ingrediente in nuevos_ingredientes:
            ingrediente = ingrediente.strip()
            if ingrediente:  # Evitar insertar valores vacíos
                db.ingredientes_pasos.insert_one({
                    "receta_id": ObjectId(receta_id),
                    "ingrediente": ingrediente
                })

    if nuevos_pasos is not None:
        db.ingredientes_pasos.delete_many({"receta_id": ObjectId(receta_id), "paso": {"$exists": True}})
        for paso in nuevos_pasos:
            paso = paso.strip()
            if paso:  # Evitar insertar valores vacíos
                db.ingredientes_pasos.insert_one({
                    "receta_id": ObjectId(receta_id),
                    "paso": paso
                })

# Función para eliminar una receta
def eliminar_receta(receta_id):
    db.recetas.delete_one({"_id": ObjectId(receta_id)})
    db.ingredientes_pasos.delete_many({"receta_id": ObjectId(receta_id)})

# Función para listar todas las recetas
def listar_recetas():
    recetas = db.recetas.find()
    return [(str(receta["_id"]), receta["nombre"]) for receta in recetas]

# Función para buscar una receta por ID
def buscar_receta(receta_id):
    receta = db.recetas.find_one({"_id": ObjectId(receta_id)})
    if receta:
        ingredientes_pasos = db.ingredientes_pasos.find({"receta_id": ObjectId(receta_id)})
        return receta, [(ip.get("ingrediente"), ip.get("paso")) for ip in ingredientes_pasos]
    return None, []

# Mostrar menú principal
def mostrar_menu():
    print("\nLibro de Recetas")
    print("1. Agregar nueva receta")
    print("2. Actualizar receta existente")
    print("3. Eliminar receta existente")
    print("4. Ver listado de recetas")
    print("5. Buscar ingredientes y pasos de receta")
    print("6. Salir")

# Función principal
def main():
    crear_base_de_datos()

    while True:
        mostrar_menu()
        opcion = input("Selecciona una opción: ")

        if opcion == "1":
            nombre = input("Nombre de la receta: ")
            ingredientes = input("Ingresa los ingredientes (separados por comas): ").split(',')
            pasos = input("Ingresa los pasos (separados por comas): ").split(',')
            agregar_receta(nombre, ingredientes, pasos)
            print("Receta agregada exitosamente.")
        
        elif opcion == "2":
            receta_id = input("ID de la receta a actualizar: ")
            nuevo_nombre = input("Nuevo nombre de la receta (deja en blanco para mantener el actual): ")
            nuevos_ingredientes = input("Nuevos ingredientes (separados por comas, deja en blanco para mantener actuales): ")
            nuevos_pasos = input("Nuevos pasos (separados por comas, deja en blanco para mantener actuales): ")
            
            nuevos_ingredientes = nuevos_ingredientes.split(',') if nuevos_ingredientes else None
            nuevos_pasos = nuevos_pasos.split(',') if nuevos_pasos else None
            
            actualizar_receta(receta_id, nuevo_nombre or None, nuevos_ingredientes, nuevos_pasos)
            print("Receta actualizada exitosamente.")
        
        elif opcion == "3":
            receta_id = input("ID de la receta a eliminar: ")
            eliminar_receta(receta_id)
            print("Receta eliminada exitosamente.")
        
        elif opcion == "4":
            recetas = listar_recetas()
            print("\nRecetas disponibles:")
            for receta in recetas:
                print(f"ID: {receta[0]}, Nombre: {receta[1]}")
        
        elif opcion == "5":
            receta_id = input("ID de la receta a buscar: ")
            receta, ingredientes_pasos = buscar_receta(receta_id)
            if receta:
                print(f"\nReceta: {receta['nombre']}")
                print("Ingredientes y pasos:")
                for ingrediente, paso in ingredientes_pasos:
                    if ingrediente:
                        print(f"Ingrediente: {ingrediente}")
                    if paso:
                        print(f"Paso: {paso}")
            else:
                print("Receta no encontrada.")
        
        elif opcion == "6":
            print("Saliendo...")
            break
        
        else:
            print("Opción no válida. Por favor, intenta nuevamente.")

if __name__ == "__main__":
    main()
